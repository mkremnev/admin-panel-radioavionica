<?phpdeclare(strict_types=1);namespace Test\Functional\V1\Auth\Change\Email;use Ramsey\Uuid\Uuid;use Test\Functional\Json;use Test\Functional\WebTestCase;class ConfirmTest extends WebTestCase{    protected function setUp(): void    {        parent::setUp();        $this->loadFixtures([            ConfirmFixtures::class        ]);    }    public function testMethod(): void    {        $response = $this->app()->handle(self::json('GET', '/v1/change/email/confirm', []));        self::assertEquals(405, $response->getStatusCode());    }    public function testSuccess(): void    {        $this->mailer()->clear();        $this->app()->handle(self::json('POST', '/v1/change/email', [            'id' => ConfirmFixtures::VALID,            'email' => 'new-email@app.test'        ]));        $token = $this->mailer()->getTokenEmailTo('new-email@app.test');        $response = $this->app()->handle(self::json('POST', '/v1/change/email/confirm', [            'token' => $token        ]));        self::assertEquals(200, $response->getStatusCode());        self::assertEquals('', (string)$response->getBody());    }    public function testIncorrectToken(): void    {        $response = $this->app()->handle(self::json('POST', '/v1/change/email/confirm', [            'token' => Uuid::uuid4()->toString()        ]));        self::assertEquals(409, $response->getStatusCode());        self::assertJson($body = (string)$response->getBody());        self::assertEquals([            'message' => 'Incorrect token.'        ], Json::decode($body));    }    public function testEmptyEn(): void    {        $response = $this->app()->handle(self::json('POST', '/v1/change/email/confirm', [])            ->withHeader('Accept-Language', 'en'));        self::assertEquals(422, $response->getStatusCode());        self::assertJson($body = (string)$response->getBody());        self::assertEquals([            "errors" => [                "token" => "This value should not be blank."            ]        ], Json::decode($body));    }    public function testEmptyRu(): void    {        $response = $this->app()->handle(self::json('POST', '/v1/change/email/confirm', [])            ->withHeader('Accept-Language', 'ru'));        self::assertEquals(422, $response->getStatusCode());        self::assertJson($body = (string)$response->getBody());        self::assertEquals([            "errors" => [                "token" => "Значение не должно быть пустым."            ]        ], Json::decode($body));    }}
<?phpdeclare(strict_types=1);namespace Test\Functional\V1\Auth\Change\Email;use Ramsey\Uuid\Uuid;use Test\Functional\Json;use Test\Functional\WebTestCase;class RequestTest extends WebTestCase{    protected function setUp(): void    {        parent::setUp();        $this->loadFixtures([            RequestFixtures::class        ]);    }    public function testMethod(): void    {        $response = $this->app()->handle(self::json('GET', '/v1/change/email'));        self::assertEquals(405, $response->getStatusCode());    }    public function testSuccess(): void    {        $this->mailer()->clear();        $response = $this->app()->handle(self::json('POST', '/v1/change/email', [            'id' => RequestFixtures::VALID,            'email' => 'new-email@app.test'        ]));        self::assertTrue($this->mailer()->hasEmailSentTo('new-email@app.test'));        self::assertEquals(201, $response->getStatusCode());    }    public function testNotValidIdEn(): void    {        $this->mailer()->clear();        $response = $this->app()->handle(self::json('POST', '/v1/change/email', [            'id' => Uuid::uuid4()->toString(),            'email' => 'new-email@app.test'        ])->withHeader('Accept-Language', 'en'));        self::assertEquals(409, $response->getStatusCode());        self::assertJson($body = (string)$response->getBody());        self::assertEquals([            'message' => 'User is not found.'        ], Json::decode($body));    }    public function testNotValidIdRu(): void    {        $this->mailer()->clear();        $response = $this->app()->handle(self::json('POST', '/v1/change/email', [            'id' => Uuid::uuid4()->toString(),            'email' => 'new-email@app.test'        ])->withHeader('Accept-Language', 'ru'));        self::assertEquals(409, $response->getStatusCode());        self::assertJson($body = (string)$response->getBody());        self::assertEquals([            'message' => 'Пользователь не найден.'        ], Json::decode($body));    }}
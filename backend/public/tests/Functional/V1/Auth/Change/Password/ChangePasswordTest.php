<?phpdeclare(strict_types=1);namespace Test\Functional\V1\Auth\Change\Password;use Test\Functional\Json;use Test\Functional\WebTestCase;class ChangePasswordTest extends WebTestCase{    protected function setUp(): void    {        parent::setUp();        $this->loadFixtures([            PasswordFixtures::class        ]);    }    public function testMethod(): void    {        $response = $this->app()->handle(self::json('GET', '/v1/change/password'));        self::assertEquals(405, $response->getStatusCode());    }    public function testSuccess(): void    {        $response = $this->app()->handle(self::json('POST', '/v1/change/password', [            'id' => PasswordFixtures::VALID,            'current' => 'old-password',            'new' => 'new-password'        ]));        self::assertEquals(200, $response->getStatusCode());        self::assertEquals('', $response->getBody());    }    public function testEmptyRu(): void    {        $response = $this->app()->handle(self::json('POST', '/v1/change/password', [])            ->withHeader('Accept-Language', 'ru'));        self::assertEquals(422, $response->getStatusCode());        self::assertJson($body = (string)$response->getBody());        self::assertEquals([            "errors" => [                "id" => "Значение не должно быть пустым.",                "current" => "Значение не должно быть пустым.",                "new" => "Значение не должно быть пустым."            ]        ], Json::decode($body));    }    public function testEmptyEn(): void    {        $response = $this->app()->handle(self::json('POST', '/v1/change/password', [])            ->withHeader('Accept-Language', 'en'));        self::assertEquals(422, $response->getStatusCode());        self::assertJson($body = (string)$response->getBody());        self::assertEquals([            "errors" => [                "id" => "This value should not be blank.",                "current" => "This value should not be blank.",                "new" => "This value should not be blank."            ]        ], Json::decode($body));    }    public function testCurrentNotValidRu(): void    {        $response = $this->app()->handle(self::json('POST', '/v1/change/password', [            'id' => PasswordFixtures::VALID,            'current' => 'not-valid-password',            'new' => 'new-password'        ])        ->withHeader('Accept-Language', 'ru'));        self::assertEquals(409, $response->getStatusCode());        self::assertJson($body = (string)$response->getBody());        self::assertEquals([            "message" => "Неверный текущий пароль."        ], Json::decode($body));    }    public function testCurrentNotValidEn(): void    {        $response = $this->app()->handle(self::json('POST', '/v1/change/password', [            'id' => PasswordFixtures::VALID,            'current' => 'not-valid-password',            'new' => 'new-password'        ])            ->withHeader('Accept-Language', 'en'));        self::assertEquals(409, $response->getStatusCode());        self::assertJson($body = (string)$response->getBody());        self::assertEquals([            "message" => "Incorrect current password."        ], Json::decode($body));    }}
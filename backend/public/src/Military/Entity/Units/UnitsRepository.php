<?phpdeclare(strict_types=1);namespace App\Military\Entity\Units;use Doctrine\ORM\EntityManagerInterface;use Doctrine\ORM\EntityRepository;use Doctrine\ORM\Query\Expr\Join;use DomainException;use function print_r;class UnitsRepository{    private EntityManagerInterface $em;    private EntityRepository $repo;    public function __construct(EntityManagerInterface $em, EntityRepository $repo)    {        $this->repo = $repo;        $this->em = $em;    }    public function hasByName(Name $name): bool    {        return $this->repo->createQueryBuilder('t')                ->select('COUNT(t.id)')                ->andWhere('t.name=:name')                ->setParameter(':name', $name->getValue())                ->getQuery()->getSingleScalarResult() > 0;    }    public function getId(Id $id): Units    {        if(!$units = $this->repo->find($id->getValue())) {            throw new DomainException("Units is not found.");        }        /** @var Units $units */        return $units;    }    public function getByName(Name $name): Units    {        if(!$units = $this->repo->findOneBy(['name' => $name->getValue()])) {            throw new DomainException("Units is not found.");        }        /** @var Units $units */        return $units;    }    public function getAllUnits(): array    {        $units = $this            ->repo            ->createQueryBuilder('t')            ->select('t.id, t.name, t.address, t.commander.lastname, t.commander.firstname, t.commander.surname, t.amount')            ->innerJoin('t.officials', 'o')            ->where('o.id = da75c5a6-a3f9-4d0a-9bda-ba0fd8318737')            ->getQuery()            ->getArrayResult();        print_r($units);        return $units;    }    public function add(Units $units): void    {        $this->em->persist($units);    }    public function delete(Units $units): void    {        $this->em->remove($units);    }}
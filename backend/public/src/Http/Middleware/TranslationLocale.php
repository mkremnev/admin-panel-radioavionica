<?phpdeclare(strict_types=1);namespace App\Http\Middleware;use Psr\Http\Message\ResponseInterface;use Psr\Http\Message\ServerRequestInterface;use Psr\Http\Server\RequestHandlerInterface;use Psr\Http\Server\MiddlewareInterface;use Symfony\Component\Translation\Translator;class TranslationLocale implements MiddlewareInterface{    private Translator $translator;    /**     * TranslationLocale constructor.     * @param Translator $translator     */    public function __construct(Translator $translator)    {        $this->translator = $translator;    }    /**     * @inheritDoc     */    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface    {        $locale = $request->getHeaderLine('Accept-Language');        if (!empty($locale)) {            $this->translator->setLocale($locale);        }        return $handler->handle($request);    }}
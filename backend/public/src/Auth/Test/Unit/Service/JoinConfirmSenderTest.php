<?phpdeclare(strict_types=1);namespace App\Auth\Test\Unit\Service;use App\Auth\Entity\User\Email;use App\Auth\Entity\User\Token;use App\Auth\Service\JoinConfirmationSender;use DateTimeImmutable;use RuntimeException;use Ramsey\Uuid\Uuid;use Swift_Mailer;use Swift_Message;class JoinConfirmSenderTest extends \PHPUnit\Framework\TestCase{    public function testSuccess(): void    {        $from = ['app@test.test' => 'Maxim'];        $to = new Email('user@test.test');        $token = new Token(Uuid::uuid4()->toString(), new DateTimeImmutable());        $confirmUrl = '/join/confirm?token=' . $token->getValue();        $mailer = $this->createMock(Swift_Mailer::class);        $mailer->expects($this->once())->method('send')->willReturnCallback(            static function (Swift_Message $message) use ($from, $to, $confirmUrl): int {                self::assertEquals($from, $message->getFrom());                self::assertEquals([$to->getValue() => null], $message->getTo());                self::assertEquals('Join confirmation', $message->getSubject());                self::assertStringContainsString($confirmUrl, $message->getBody());                return 1;            }        );        $sender = new JoinConfirmationSender($mailer, $from);        $sender->send($to, $token);    }    public function testError(): void    {        $from = ['app@test.test' => 'Maxim'];        $to = new Email('user@test.test');        $token = new Token(Uuid::uuid4()->toString(), new DateTimeImmutable());        $mailer = $this->createStub(Swift_Mailer::class);        $mailer->method('send')->willReturn(0);        $sender = new JoinConfirmationSender($mailer, $from);        $this->expectException(RuntimeException::class);        $sender->send($to, $token);    }}